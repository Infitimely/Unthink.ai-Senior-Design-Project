"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _resolve = _interopRequireDefault(require("./resolve"));

exports.onCreateWebpackConfig = ({
  actions,
  stage,
  loaders
}, {
  cssLoaderOptions = {},
  postCssPlugins,
  loaderOptions,
  lessOptions
}) => {
  var _cssLoaderOptions$mod, _cssLoaderOptions$mod2, _cssLoaderOptions$mod3;

  const isSSR = [`develop-html`, `build-html`].includes(stage);
  const {
    setWebpackConfig
  } = actions;
  const lessLoader = {
    loader: (0, _resolve.default)(`less-loader`),
    options: {
      lessOptions: { ...lessOptions
      },
      ...loaderOptions
    }
  };
  const lessRule = {
    test: /\.less$/,
    use: isSSR ? [loaders.null()] : [loaders.miniCssExtract(), loaders.css({
      importLoaders: 2,
      ...cssLoaderOptions,
      modules: false
    }), loaders.postcss({
      plugins: postCssPlugins
    }), lessLoader]
  };
  const lessRuleModules = {
    test: /\.module\.less$/,
    use: [!isSSR && loaders.miniCssExtract({
      modules: {
        namedExport: (_cssLoaderOptions$mod = (_cssLoaderOptions$mod2 = cssLoaderOptions.modules) === null || _cssLoaderOptions$mod2 === void 0 ? void 0 : _cssLoaderOptions$mod2.namedExport) !== null && _cssLoaderOptions$mod !== void 0 ? _cssLoaderOptions$mod : true
      }
    }), loaders.css({
      importLoaders: 2,
      ...cssLoaderOptions,
      modules: (_cssLoaderOptions$mod3 = cssLoaderOptions.modules) !== null && _cssLoaderOptions$mod3 !== void 0 ? _cssLoaderOptions$mod3 : true
    }), loaders.postcss({
      plugins: postCssPlugins
    }), lessLoader].filter(Boolean)
  };
  const configRules = [{
    oneOf: [lessRuleModules, lessRule]
  }];
  setWebpackConfig({
    module: {
      rules: configRules
    }
  });
};